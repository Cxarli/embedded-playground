#![allow(non_upper_case_globals, dead_code)]

pub const Chess: [u8; 8] = [
    0b_1010_1010,
    0b_0101_0101,
    0b_1010_1010,
    0b_0101_0101,
    0b_1010_1010,
    0b_0101_0101,
    0b_1010_1010,
    0b_0101_0101,
];

pub const InvertChess: [u8; 8] = [
    0b_0101_0101,
    0b_1010_1010,
    0b_0101_0101,
    0b_1010_1010,
    0b_0101_0101,
    0b_1010_1010,
    0b_0101_0101,
    0b_1010_1010,
];

pub const One: [u8; 8] = [
    0b_0000_0000,
    0b_0000_0000,
    0b_0000_0001,
    0b_1111_1111,
    0b_1111_1111,
    0b_0110_0001,
    0b_0000_0000,
    0b_0000_0000,
];



// TODO: make Character trait with merge(&Character) function
//       get preference width from both, make sum to 8


pub fn merge(lhs: &[u8; 4], rhs: &[u8; 4]) -> [u8; 8] {
    return [
        rhs[0],
        rhs[1],
        rhs[2],
        rhs[3],
        lhs[0],
        lhs[1],
        lhs[2],
        lhs[3],
    ];
}

pub fn merge35(lhs: &[u8; 3], rhs: &[u8; 5]) -> [u8; 8] {
    return [
        rhs[0],
        rhs[1],
        rhs[2],
        rhs[3],
        rhs[4],
        lhs[0],
        lhs[1],
        lhs[2],
    ];
}

pub fn merge53(lhs: &[u8; 5], rhs: &[u8; 3]) -> [u8; 8] {
    return [
        rhs[0],
        rhs[1],
        rhs[2],
        lhs[0],
        lhs[1],
        lhs[2],
        lhs[3],
        lhs[4],
    ];
}

pub const h: [u8; 4] = [
    0b_0000_0111,
    0b_0000_1000,
    0b_0000_1000,
    0b_0111_1111,
];

pub const i: [u8; 4] = [
    0b_0000_0000,
    0b_0010_1111,
    0b_0000_0000,
    0b_0000_0000,
];

pub const e: [u8; 4] = [
    0b_0000_1000,
    0b_0001_0101,
    0b_0001_0101,
    0b_0000_1110,
];

pub const l: [u8; 4] = [
    0b_0000_0000,
    0b_0000_0001,
    0b_0111_1110,
    0b_0000_0000,
];

pub const o: [u8; 4] = [
    0b_0000_0110,
    0b_0000_1001,
    0b_0000_1001,
    0b_0000_0110,
];

pub const excl: [u8; 4] = [
    0b_0000_0000,
    0b_1111_1101,
    0b_0000_0000,
    0b_0000_0000,
];

pub const comma: [u8; 4] = [
    0b_0000_0000,
    0b_0000_0110,
    0b_0000_0001,
    0b_0000_0000,
];

pub const blank: [u8; 4] = [
    0b_0000_0000,
    0b_0000_0000,
    0b_0000_0000,
    0b_0000_0000,
];

pub const w: [u8; 4] = [
    0b_0000_0011,
    0b_0000_1100,
    0b_0000_0011,
    0b_0000_1100,
];

pub const r: [u8; 4] = [
    0b_0000_1000,
    0b_0000_1000,
    0b_0000_0111,
    0b_0000_0000,
];

pub const d: [u8; 4] = [
    0b_1111_1110,
    0b_0000_1001,
    0b_0000_1001,
    0b_0000_0110,
];

pub const s: [u8; 4] = [
    0b_0010_0110,
    0b_0100_1001,
    0b_0100_1001,
    0b_0011_0010,
];

pub const e3: [u8; 3] = [
    0b_0000_1000,
    0b_0001_0101,
    0b_0000_1111,
];

pub const m5: [u8; 5] = [
    0b_0000_0111,
    0b_0000_1000,
    0b_0000_0110,
    0b_0000_1000,
    0b_0000_0111,
];

pub const i3: [u8; 3] = [
    0b_0000_0000,
    0b_0010_1111,
    0b_0000_0000,
];

pub const c: [u8; 4] = [
    0b_0000_0000,
    0b_0001_0001,
    0b_0001_0001,
    0b_0000_1110,
];

pub const C: [u8; 4] = [
    0b_0000_0000,
    0b_1000_0001,
    0b_1000_0001,
    0b_0111_1110,
];

pub const a: [u8; 4] = [
    0b_0000_1111,
    0b_0001_0101,
    0b_0001_0101,
    0b_0000_0010,
];